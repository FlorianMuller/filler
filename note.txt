1. Se rapprocher
2. Encercler
3. Finir de tout completer

= = = =
I - Se rapprocher:

. ft_se_rapprocher():
	Tant que: On a pas tt testé
		Si pos valide:
			dist = ft_dist_adv(pos)
		Si dist < best_dist
			best_pos = pos
		pos++
	ret (pos)

. ft_dist_adv(pos):
	Tant que: On a pas tt testé
		Si pion Adv:
			dist = ft_dist(posAdv, pos)
		Si dist < best_dist
			best_dist = dist
	ret (best_dist);

. ft_dist(A, B);
	ret(sqrt(|xA - xB|^2 + |yB - yA|^2));

= = = =

II - Encercler

. ft_encercler:
	Tant que: On a pas tt testé
		Si pos valide:
			cont= ft_contacte(pos)
		Si cont > best_cont
			best_cont = cont
	ret (cont)

= = = =

III - Finir

. ft_finish:
	Tant que: On a pas tt testé
		Si pos valide:
			ret (pos)
===================

cont = 7
. X * . .
X X * . .
. * * . .
. . . . .
. . . . .

cont = 5
. X * . .
X X * . .
. . * . .
. . . . .
. . . . .

cont = 4
. X * . .
X X * . .
. . . . .
. . . . .
. . . . .


===================
   0 1 2 3 4 -> (X)
 0 A . . . .
 1 . . . . .
 2 . . . C .
 3 . B . . .
 4 . . . . .
 |
 v
(Y)



A(0,0)
B(1,3)
C(3,2)

AB 	= sqrt(|xB - xA|^2 + |yB - yA|^2)

=================
stat:

/******************\
|Fmuller vs Cpoulet|
\******************/

Petit:

    Fm (P1): 7
    Cp (P2): 3

    Cp (P1): 7
    Fm (P2): 3

    (avec vers le haut)
    Cp (P1): 0
    Fm (P2): 0

Grand:

    Fm (P1): 6
    Cp (P2): 4

    Cp (P1): 7
    Fm (P2): 3

====================
/****************\
|Fmuller vs Carli|
\****************/

Petit:

    Fm (P1): 10
    Ca (P2): 0

    Ca (P1): 5
    Fm (P2): 5

Moyen:

    Ca (P1): 1
    Fm (P2): 9

Grand:

    Fm (P1): 10
    Ca (P2): 0

    Ca (P1): 0

================================
ft up:

t_point	ft_go_up(t_env env)
{
	t_point	obj;
	t_point	pos;
	t_point	p;
	t_point	final_pos;
	t_point	best_pos;
	int		dist;
	int		best_dist;

	best_dist = -1;
	ft_set_point(&pos, 0, 0);
	// ft_set_point(&obj, 14, 0);
	ft_set_point(&obj, 8, 7);
	while (env.map[pos.y])
	{
		if (ft_check_pos(env, pos))
		{
			ft_set_point(&p, 0, 0);
			while(env.token[p.y])
			{
				ft_set_point(&final_pos, pos.x + p.x, pos.y + p.y);
				dist = ft_dist(final_pos, obj);
				if (best_dist == -1 || dist < best_dist)
				{
					best_dist = dist;
					best_pos = pos;
				}
			ft_point_plus(&p, env.tokensize.x - 1);
			}
		}
		ft_point_plus(&pos, env.mapsize.x - 1);
	}
	return (best_pos);
}
====================================
vm_reader:

int	main(void)
{
	char	*s;
	int		ret;
	int		fd;

	mknod("coolpipe", S_IFIFO | 0666, 0);
	fd = open("coolpipe", O_RDWR);
	while ((ret = get_next_line(0, &s)) == 1)
	{
		// ft_printf("[%s]\n", s);
		ft_printf_fd(fd, "%s\n", s);
		ft_strdel(&s);
	}
	if (ret == -1)
	{
		ft_printf_fd(2, "get_next_line failed\n");
		return (3);
	}
	return (0);
}